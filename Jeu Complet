def load_board(path, game) :
    """Read the board datas and organise them in a data structure
    
    Parameters
    -----------
    path : string that contains the path towards the map file (str).
    game : data structure that contains all the data of the game (dict).
    
    Version
    -----------
    specification : Alexandre Helman (v.1 05/03/2021)
    implementation : Alexandre Helman, Bastien Marchal (v.4 08/03/2021)
    """
    
    infos = open(path, 'r') 
    load = infos.readlines()
    
    ## chaque niveau d'imbrication verifie que les informations du plateau sont correctement disposees
    if load[0] == 'map:\r\n' or 'map:\n' or 'map:\r' : 
        y_board = int(load[1][0] + load[1][1])
        x_board = int(load[1][3] + load[1][4])

        if load[2] == 'anthills:\r\n' or 'anthills:\r' or 'anthills:\n' : 
            ## extrait les coordonnees de la fourmiliere orange
            if load[3][1] != ' ' :
                anthills_orange_y = int(load[3][0] + load[3][1])
                if load[3][4] !=  '\n' or '\r' or ' ' :
                    anthills_orange_x = int(load[3][3] + load[3][4])
                elif load[3][4] == '\n' or '\r' or ' ':
                    anthills_orange_x = int(load[3][3])
            elif load[3][1] == ' ' :
                anthills_orange_y = int(load[3][0])
                if load[3][3] != '\n' or '\r' or ' ' :
                    anthills_orange_x = int(load[3][2] + load[3][3])
                elif load[3][3] == '\n' or '\r' or ' ':
                    anthills_orange_x = int(load[3][2])

            ## extrait les coordonnees de la fourmiliere bleue
            if load[4][1] != ' ' :
                anthills_blue_y = int(load[4][0] + load[4][1])
                if load[4][4] != '\n' or '\r' or ' ' :
                    anthills_blue_x = int(load[4][3] + load[4][4])
                elif load[4][4] == '\n' or '\r' or ' ':
                    anthills_blue_x = int(load[4][3])
            elif load[4][1] == ' ' :
                anthills_blue_y = int(load[4][0])
                if load[4][3] != '\n' or '\r' or ' ' :
                    anthills_blue_x = int(load[4][2] + load[4][3])
                elif load[4][3] == '\n' or '\r' or ' ':
                    anthills_blue_x = int(load[4][2])

            ## verifie que la partie clods commence correctement
            if load[5] == 'clods:\r\n' or 'clods:\n' or 'clods:\r' :
                n = 0
                for lenght in load :
                    n += 1
                
                nb_clod = 0
                for line in range(6, n) :
                
                    if load[line][1] != " " :
                        clody = int(load[line][0] + load[line][1])
                        if load[line][4] != " " :
                            clodx = int(load[line][3] + load[line][4])
                            clod_weigth = int(load[line][6])
                        elif load[line][4] == " " :
                            clodx = int(load[line][3])
                            clod_weigth = int(load[line][5])
                    elif load[line][1] == " " :
                        clody = int(load[line][0])
                        if load[line][3] != " " :
                            clodx = int(load[line][2] + load[line][3])
                            clod_weigth = int(load[line][5])
                        elif load[line][3] == " " :
                            clodx = int(load[line][2])
                            clod_weigth = int(load[line][4])

                    ## range les informations sur les mottes dans la structure de donnees
                    game["clods"].append((clodx, clody, clod_weigth))
                    nb_clod += 1

            ## range les informations sur les fourmilieres dans la structure de donnees
            game["anthills"]["orange"]["x"] = anthills_orange_x
            game["anthills"]["orange"]["y"] = anthills_orange_y
            game["anthills"]["blue"]["x"] = anthills_blue_x
            game["anthills"]["blue"]["y"] = anthills_blue_y

        ## range les informations sur la taille du plateau dans la structure de donnees
        game["board"]["length_x"] = x_board
        game["board"]["length_y"] = y_board

    else :
        print("Votre fichier n'a pas le format requis.")

def display(game_mode, game):
    """This function show the game board after each turns. If the game is played by 2 bots (0 players), there will be a 500ms break before each turn
    
    Parameters :
    ====================================================================
    game_mode : how many users there will be (0,1,2) (int)
    game : data structure that contains game's informations (dict)
    
    Version :
    ====================================================================
    specification : Antoine Culot (v.1 21/02/21)
    implementation : Antoine Culot (v.4,1 24/03/21)
    """

    term = Terminal()
    print(term.home + term.white_on_black + term.clear)

    #board parameters
    map_wight = game["board"]["length_x"]
    map_height = game["board"]["length_y"]
    anthill_1 = [game["anthills"]["blue"]["x"], game["anthills"]["blue"]["y"]]
    anthill_2 = [game["anthills"]["orange"]["x"], game["anthills"]["orange"]["y"]]

    #verify if the terminal is big enough to display the board 
    if term.height <= map_height and term.width < map_wight * 3 + 5:
        print('FATAL ERROR : YOUR TERMINAL IS NOT BIG ENOUGH TO DISPLAY THE BOARD')
    else:
        #create the board
        for x in range(map_wight):
            number = x+1
            print(term.move_xy(x*3+5, 0) + str(number))
        print('    '+' __'*map_wight)
        for y in range(map_height):
            if y < 9:
                print(' '+ str(y+1) + '  ' + '|__'*map_wight + '|')
            else:
                print(str(y+1) + '  ' + '|__'*map_wight + '|')

        #put the blue anthills on the board
        x_blue_target = game["anthills"]["blue"]["x"]
        y_blue_target = game["anthills"]["blue"]["y"]
        x_locate = x_blue_target * 3 + 2
        y_locate = y_blue_target + 1


        for y in range(3):
            print(term.move_yx(y_locate - (y-1), x_locate - 4) + term.white_on_blue + '|__'*3 + '|')
        print(term.move_yx(y_locate, x_locate) + '\u23CF')

        #put the orange anthills on the board
        x_orange_target = game["anthills"]["orange"]["x"]
        y_orange_target = game["anthills"]["orange"]["y"]
        x_locate = x_orange_target * 3 + 2
        y_locate = y_orange_target + 1

        for y in range(3):
            print(term.move_yx(y_locate - (y-1), x_locate - 4) + term.white_on_orange + '|__'*3 + '|')
        print(term.move_yx(y_locate, x_locate) + '\u23CF')
        
        #put the blue ants on the board
        for ant in range(len(game['ants']['blue'])):
            x_locate = int(game['ants']['blue'][ant][0]) * 3 + 2
            y_locate = int(game['ants']['blue'][ant][1]) + 1
            if game['ants']['blue'][ant][3] == 1:
                print(term.move_yx(y_locate, x_locate) + term.white_on_aqua + '\U0001f41c')
            elif game['ants']['blue'][ant][3] == 2:
                print(term.move_yx(y_locate, x_locate) + term.white_on_blue + '\U0001f41c')
            elif game['ants']['blue'][ant][3] == 3:
                print(term.move_yx(y_locate, x_locate) + term.white_on_cyan4 + '\U0001f41c')            
        
        #put the orange ants on the board
        for ant in range(len(game['ants']['orange'])):
            x_locate = int(game['ants']['orange'][ant][0]) * 3 + 2
            y_locate = int(game['ants']['orange'][ant][1]) + 1
            if game['ants']['orange'][ant][3] == 1:
                print(term.move_yx(y_locate, x_locate) + term.white_on_yellow + '\U0001f41c')
            elif game['ants']['orange'][ant][3] == 2:
                print(term.move_yx(y_locate, x_locate) + term.white_on_orange + '\U0001f41c')
            elif game['ants']['orange'][ant][3] == 3:
                print(term.move_yx(y_locate, x_locate) + term.white_on_orange + '\U0001f41c')

        #put the clods on the board
        clod = -1
        for clods in game["clods"]:
            clod += 1
            x_locate = int(game["clods"][clod][0])
            y_locate = int(game["clods"][clod][1])
            if game["clods"][clod][2] == 1:
                print(term.move_yx(y_locate + 1, x_locate * 3 + 2) + term.white_on_coral1 + '\U0001f4a9')
            if game["clods"][clod][2] == 2:
                print(term.move_yx(y_locate + 1, x_locate * 3 + 2) + term.white_on_orangered3 + '\U0001f4a9') 
            if game["clods"][clod][2] == 3:
                print(term.move_yx(y_locate + 1, x_locate * 3 + 2) + term.white_on_coral4 + '\U0001f4a9') 

        #put the legend

        if term.height > map_height + 9:
            print(term.move_yx(map_height + 3, 0) + term.white_on_black + 'Summary :')
            #clods
            print(term.move_yx(map_height + 4, 0) + term.white_on_coral1 + '\U0001f4a9' + term.white_on_black + ' : clod level 1')
            print(term.move_yx(map_height + 5, 0) + term.white_on_orangered3  + '\U0001f4a9' + term.white_on_black + ' : clod level 2')
            print(term.move_yx(map_height + 6, 0) + term.white_on_coral4 + '\U0001f4a9' + term.white_on_black + ' : clod level 3')
            #anthills
            print(term.move_yx(map_height + 4, term.width//3) + term.white_on_blue + '\u23CF' + ' ' + term.white_on_black + ' : blue team anthill')
            print(term.move_yx(map_height + 5, term.width//3) + term.white_on_orange + '\u23CF' + ' ' + term.white_on_black + ' : orange team anthill')
            #blue ants
            print(term.move_yx(map_height + 7, 0) + term.white_on_aqua + '\U0001f41c' + term.white_on_black + ' : blue ant level 1')
            print(term.move_yx(map_height + 8, 0) + term.white_on_blue + '\U0001f41c' + term.white_on_black + ' : blue ant level 2')
            print(term.move_yx(map_height + 9, 0) + term.white_on_cyan4 + '\U0001f41c' + term.white_on_black + ' : blue ant level 3')
            #orange ants
            print(term.move_yx(map_height + 7, term.width//3) + term.white_on_yellow + '\U0001f41c' + term.white_on_black + ' : orange ant level 1')
            print(term.move_yx(map_height + 8, term.width//3) + term.white_on_orange + '\U0001f41c' + term.white_on_black + ' : orange ant level 2')
            print(term.move_yx(map_height + 9, term.width//3) + term.white_on_red + '\U0001f41c' + term.white_on_black + ' : orange ant level 3')
            #note
            print(term.move_yx(map_height + 4, term.width//3*2) + 'Note : a clod carried by an ant')
            print(term.move_yx(map_height + 5, term.width//3*2) + 'takes on the color of the ant')

        print(term.move_yx(term.height, 0) + term.white_on_black)

def spawn(game, blue_role = "Looter", orange_role = "Looter"):
    """ Spawn a new ant beside the anthill
    
    Parameters
    ------------------------
    game : data structure that contains game's informations (dict)
    
    Version
    --------------
    Specification : Alexis Van Wallendael (v.1 21/02/21)
    Implementation : Alexandre Helman (v.4 20/03/21)
    """

    orange_anthill_x = game["anthills"]["orange"]["x"]
    orange_anthill_y = game["anthills"]["orange"]["y"]
    blue_anthill_x = game["anthills"]["blue"]["x"]
    blue_anthill_y = game["anthills"]["blue"]["y"]

    ## Partie orange
    nb_orants = 0
    for or_ants in game["ants"]["orange"] :
        nb_orants += 1

    get_orclods = 0
    nclod = 0
    for clod in game["clods"] :
        clodx = game["clods"][nclod][0]
        clody = game["clods"][nclod][1]
        nclod += 1
        if (clodx, clody) == (orange_anthill_x - 1, orange_anthill_y) :
            get_orclods += 1
        elif (clodx, clody) == (orange_anthill_x, orange_anthill_y - 1) :
            get_orclods += 1
        elif (clodx, clody) == (orange_anthill_x - 1, orange_anthill_y - 1) :
            get_orclods += 1
        elif (clodx, clody) == (orange_anthill_x - 1, orange_anthill_y + 1) :
            get_orclods += 1
        elif (clodx, clody) == (orange_anthill_x, orange_anthill_y + 1) :
            get_orclods += 1
        elif (clodx, clody) == (orange_anthill_x + 1, orange_anthill_y + 1) :
            get_orclods += 1
        elif (clodx, clody) == (orange_anthill_x + 1, orange_anthill_y) :
            get_orclods += 1
        elif (clodx, clody) == (orange_anthill_x + 1, orange_anthill_y - 1) :
            get_orclods += 1

    if get_orclods < 3 :
        level = 1
    elif get_orclods >= 3 and get_orclods < 6 :
        level = 2
    elif get_orclods >= 6 :
        level = 3

    if level == 1 :
        life = 3
    elif level == 2 :
        life = 5
    elif level == 3 :
        life = 7

    is_lifting_clod = False
    game["ants"]["orange"].append([orange_anthill_x, orange_anthill_y, life, level, is_lifting_clod, orange_role])

   ## Partie bleue

    nb_blants = 0
    for bl_ants in game["ants"]["blue"] :
        nb_blants += 1

    get_blclods = 0
    nclod = 0
    for clod in game["clods"] :
        clodx = game["clods"][nclod][0]
        clody = game["clods"][nclod][1]
        nclod += 1
        if (clodx, clody) == (blue_anthill_x - 1, blue_anthill_y) :
            get_blclods += 1
        elif (clodx, clody) == (blue_anthill_x, blue_anthill_y - 1) :
            get_blclods += 1
        elif (clodx, clody) == (blue_anthill_x - 1, blue_anthill_y - 1) :
            get_blclods += 1
        elif (clodx, clody) == (blue_anthill_x - 1, blue_anthill_y + 1) :
            get_blclods += 1
        elif (clodx, clody) == (blue_anthill_x, blue_anthill_y + 1) :
            get_blclods += 1
        elif (clodx, clody) == (blue_anthill_x + 1, blue_anthill_y + 1) :
            get_blclods += 1
        elif (clodx, clody) == (blue_anthill_x + 1, blue_anthill_y) :
            get_blclods += 1
        elif (clodx, clody) == (blue_anthill_x + 1, blue_anthill_y - 1) :
            get_blclods += 1

    if get_blclods < 3 :
        level = 1
    elif get_blclods >= 3 and get_blclods < 6 :
        level = 2
    elif get_blclods >= 6 :
        level = 3

    if level == 1 :
        life = 3
    elif level == 2 :
        life = 5
    elif level == 3 :
        life = 7

    game["ants"]["blue"].append([blue_anthill_x, blue_anthill_y, life, level, is_lifting_clod, blue_role])

def IA_Play(game, player_color):
    """Read the board and play on its own

    Parameters
    ----------
    game : data structure that contains game informations (dict).
    player_color: player's color so orange or blue(str)
    
    Return
    ------
    ia_orders : Orders from the IA for the actual game.

    Version
    -------
    Spécification : Bastien Marchal (v.2 22/03/2021)
    Implémentation: Bastien Marchal (v.1 22/03/2021)

    """
    ia_orders = ""
    ant_n = 0
    if player_color == "blue":
        enemy_color = "orange"
    else :
        enemy_color = "blue"
    for ant in game["ants"][player_color]:
        x_me = game["ants"][player_color][ant_n][0]
        y_me = game["ants"][player_color][ant_n][1]
        enemy_n = 0
        for enemy in game["ants"][enemy_color]:
            x_enemy = game["ants"][enemy_color][enemy_n][0]
            y_enemy = game["ants"][enemy_color][enemy_n][1]
            if x_me - x_enemy <= 1 and x_me - x_enemy >= -1 :
                if y_me - y_enemy <= 1 and y_me - y_enemy >= -1 :
                    ia_orders += str(y_me + "-" + x_me + ":*" + y_enemy + "-" + x_enemy + " ")
            enemy_n += 1
        clod_n = 0
        for clod in game["clods"]:
            if x_me == game["clods"][clod_n][0] :
                if y_me == game["clods"][clod_n][1] :
                    ia_orders += str(y_me + "-" + x_me + "lift" + " ")
            clod_n += 1
        change_x = random.randint(0, 2)
        change_y = random.randint(0, 2)
        if change_x == 0:
            new_x = x_me - 1
            if change_y == 0:
                new_y = y_me - 1
            if change_y == 1:
                new_y = y_me
            if change_y == 2:
                new_y = y_me + 1
        elif change_x == 1:
            new_x = x_me
            if change_y == 0:
                new_y = y_me - 1
            if change_y == 1:
                new_y = y_me
            if change_y == 2:
                new_y = y_me + 1
        elif change_x == 2:
            new_x = x_me + 1
            if change_y == 0:
                new_y = y_me - 1
            if change_y == 1:
                new_y = y_me
            if change_y == 2:
                new_y = y_me + 1
        ia_orders += str(y_me) + "-" + str(x_me) + ":@" + str(new_y) + "-" + str(new_x)
        ant_n += 1
    return ia_orders

def is_game_over(game):
    """ Check if the game is over or not

    Parameters
    ------------------------
    game : data structure that contains game's informations (dict)

    Version
    ----------------
    Specification : Alexis Van Wallendael (v.1 21/02/21)
    Implémentaton : Alexis Van Wallendael (v.1 19/03/21)
    """
    blue_anthills = []
    blue_anthills.append(game['anthills']['blue']['x'])
    blue_anthills.append(game['anthills']['blue']['y'])

    orange_anthills = []
    orange_anthills.append(game['anthills']['orange']['x'])
    orange_anthills.append(game['anthills']['orange']['y'])

    orange_victory = []
    for element in game['clods']:
        if (element[0] == orange_anthills[0] and element[1] == orange_anthills[1] + 1) or (
                element[0] == orange_anthills[0] and element[1] == orange_anthills[1] - 1) or (
                element[0] == orange_anthills[0] + 1 and element[1] == orange_anthills[1]) or (
                element[0] == orange_anthills[0] - 1 and element[1] == orange_anthills[1]) or (
                element[0] == orange_anthills[0] + 1 and element[1] == orange_anthills[1] + 1) or (
                element[0] == orange_anthills[0] - 1 and element[1] == orange_anthills[1] + 1) or (
                element[0] == orange_anthills[0] + 1 and element[1] == orange_anthills[1] - 1) or (
                element[0] == orange_anthills[0] - 1 and element[1] == orange_anthills[1] - 1):
            orange_victory.append(element)
    if len(orange_victory) == 8:
        print("Orange has won !")

    blue_victory = []
    for element in game['clods']:
        if (element[0] == blue_anthills[0] and element[1] == blue_anthills[1] + 1) or (
                element[0] == blue_anthills[0] and element[1] == blue_anthills[1] - 1) or (
                element[0] == blue_anthills[0] + 1 and element[1] == blue_anthills[1]) or (
                element[0] == blue_anthills[0] - 1 and element[1] == blue_anthills[1]) or (
                element[0] == blue_anthills[0] + 1 and element[1] == blue_anthills[1] + 1) or (
                element[0] == blue_anthills[0] - 1 and element[1] == blue_anthills[1] + 1) or (
                element[0] == blue_anthills[0] + 1 and element[1] == blue_anthills[1] - 1) or (
                element[0] == blue_anthills[0] - 1 and element[1] == blue_anthills[1] - 1):
            blue_victory.append(element)
    if len(blue_victory) == 8:
        print("Blue has won !")

def order_treatment(orders):
    """Analyse the string that contains the player's orders, if the given order is illegal, it will be ask again to the user to enter a correct order

    Parameters
    ----------
    orders : string that contains the player's orders (str).

    Version
    -------
    Spécification : Alexandre Helman (v.1 21/02/2021)
    Implémentaton : Alexis Van Wallendael (v.1 12/03/21)
    """
    my_list = orders.split()
    move_list = []
    attack_list = []
    lift_list = []

    for element in my_list:
        if element[5:7] == ":@" or element[4:6] == ":@" or element[3:5] == ":@":
            return move_list.append(element)
        elif element[5:7] == ":∗" or element[4:6] == ":∗" or element[3:5] == ":∗":
            return attack_list.append(element)
        elif element[5] == ":" or element[4] == ":" or element[3] == ":":
            return lift_list.append(element)

def gamemode():
    '''This function determinates how the game will be played (how many players, IA)
    
    Return :
    =========================================================
    game_mode : how many users there will be (0,1,2) (int)

    Version :
    =========================================================
    specification : Antoine Culot (v1 20/02/21)
    implementation : Alexandre Helman (v2 20/03/2021)
    '''

    choix = input("Combien de joueurs ? (0 : IA v IA, 1 : joueur v IA, 2 : joueur vs. joueur)")
    mode = "unknown"

    if choix == 0 :
        mode = 'online'
    elif choix == 1 :
        mode = 'solo'
    elif choix == 2 :
        mode = 'local'
    else :
        print("Ce choix n'est pas valable.")
        gamemode()
        
    return mode

def lift_drop(game, player_color, orders):
    """Change the ant's state from False (empty) to True (full) if the ant lift a clod or from True(full) to False(empty)
    if the ant drop a clod

    Parameters
    ----------
    game : data structure that contains game's informations (dict)
    player_color: player's color so orange or blue(str)
    orders: player's order in lift_list(list)

    Version
    -------
    Specification : Bastien Marchal (v.2 20/03/21)
    Implémentation : Bastien Marchal (v.1 20/03/21)
    """

    for order in orders :
        info = order.split(":")
        coord_verif = info[0].split("-")
        x_verif = int(coord_verif[0])
        y_verif = int(coord_verif[1])
        lift_drop = info[1]
        ant_n = 0
        for ant in game["ants"][player_color] :
            x = game["ants"][player_color][ant_n][0]
            y = game["ants"][player_color][ant_n][1]
            if x == x_verif:
                if y == y_verif:
                    clod_n = 0
                    for clod in game["clods"]:
                        if x_verif == game["clods"][clod_n][0]:
                            if y_verif == game["clods"][clod_n][1]:
                                if lift_drop == "lift":
                                    game["ants"][player_color][ant_n][4] = True
                        clod_n += 1
                    if lift_drop == "drop":
                        game["ants"][player_color][ant_n][4] = False
            ant_n += 1

def move(game, player_color, orders):
    """ Move the selected ant to the selected square

    Parameters
    ----------
    game : data structure that contains game's informations (dict)
    player_color: player's color so orange or blue(str)
    orders: player's order in move_list(lift)
    

    Version
    -------
    Specification : Bastien Marchal (v.2 21/02/21)
    Implémentation : Bastien Marchal (v.1 19/03/21)
    """
    
    for order in orders :
        coordonates = order.split(":@")
        coord_verif = coordonates[0].split("-")
        probably_y_verif = int(coord_verif[0])
        probably_x_verif = int(coord_verif[1])
        coord_new = coordonates[1].split("-")
        probably_y_new = int(coord_new[0])
        probably_x_new = int(coord_new[1])
        ant_n = 0
        for ant in game["ants"][player_color] :
            x = game["ants"][player_color][ant_n][0]
            y = game["ants"][player_color][ant_n][1]
            if x == probably_x_verif:
                if y == probably_y_verif:
                    if probably_x_new - probably_x_verif <= 1 and probably_x_new - probably_x_verif >= -1:
                        if probably_y_new - probably_y_verif <= 1 and probably_y_new - probably_y_verif >= -1:
                            if probably_x_new <= game["board"]["length_x"] and probably_x_new >= 0:
                                if probably_y_new <= game["board"]["length_y"] and probably_y_new >= 0:
                                    for colors in game["ants"]:
                                        color = colors
                                        n_other_ant = 0
                                        for other_ant in game["ants"][color]:
                                            x_other_ant = game["ants"][color][n_other_ant][0]
                                            y_other_ant = game["ants"][color][n_other_ant][1]
                                            if probably_x_new == x_other_ant:
                                                if probably_y_new == y_other_ant:
                                                    if color == player_color:
                                                        if n_other_ant == ant_n:
                                                            if not game["ants"][player_color][ant_n][4]:
                                                                game["ants"][player_color][ant_n][0] = probably_x_new
                                                                game["ants"][player_color][ant_n][1] = probably_y_new
                                                            else:
                                                                clod_n = 0
                                                                for clod in game["clods"]:
                                                                    if probably_x_verif == game["clods"][clod_n][0]:
                                                                        if probably_y_verif == game["clods"][clod_n][1]:
                                                                            move_clod = clod_n
                                                                    if probably_x_new == game["clods"][clod_n][0]:
                                                                        if probably_y_new == game["clods"][clod_n][1]:
                                                                            no_move = True
                                                                        else:
                                                                            no_move = False
                                                                    else:
                                                                        no_move = False
                                                                    clod_n += 1
                                                                if not no_move: 
                                                                    game["ants"][player_color][ant_n][0] = probably_x_new
                                                                    game["ants"][player_color][ant_n][1] = probably_y_new
                                                                    game["clods"][move_clod][0] = probably_x_new
                                                                    game["clods"][move_clod][1] = probably_y_new
                                                else:
                                                    if not game["ants"][player_color][ant_n][4]:
                                                        game["ants"][player_color][ant_n][0] = probably_x_new
                                                        game["ants"][player_color][ant_n][1] = probably_y_new
                                                    else:
                                                        clod_n = 0
                                                        for clod in game["clods"]:
                                                            if probably_x_verif == game["clods"][clod_n][0]:
                                                                if probably_y_verif == game["clods"][clod_n][1]:
                                                                    move_clod = clod_n
                                                            if probably_x_new == game["clods"][clod_n][0]:
                                                                if probably_y_new == game["clods"][clod_n][1]:
                                                                    no_move = True
                                                                else:
                                                                    no_move = False
                                                            else:
                                                                no_move = False
                                                            clod_n += 1
                                                        if not no_move: 
                                                            game["ants"][player_color][ant_n][0] = probably_x_new
                                                            game["ants"][player_color][ant_n][1] = probably_y_new
                                                            game["clods"][move_clod][0] = probably_x_new
                                                            game["clods"][move_clod][1] = probably_y_new
                                            else:
                                                if not game["ants"][player_color][ant_n][4]:
                                                    game["ants"][player_color][ant_n][0] = probably_x_new
                                                    game["ants"][player_color][ant_n][1] = probably_y_new
                                                else:
                                                    clod_n = 0
                                                    for clod in game["clods"]:
                                                        if probably_x_verif == game["clods"][clod_n][0]:
                                                            if probably_y_verif == game["clods"][clod_n][1]:
                                                                move_clod = clod_n
                                                        if probably_x_new == game["clods"][clod_n][0]:
                                                            if probably_y_new == game["clods"][clod_n][1]:
                                                                no_move = True
                                                            else:
                                                                no_move = False
                                                        else:
                                                            no_move = False
                                                        clod_n += 1
                                                    if not no_move: 
                                                        game["ants"][player_color][ant_n][0] = probably_x_new
                                                        game["ants"][player_color][ant_n][1] = probably_y_new
                                                        game["clods"][move_clod][0] = probably_x_new
                                                        game["clods"][move_clod][1] = probably_y_new  
                                            n_other_ant += 1
            ant_n += 1

#=============================================================================================================================================================================================================#

from blessed import Terminal
term = Terminal()
import random
import time

game = {
    "board" : {
        "length_x" : 0, "length_y" : 0
    },

    "ants" : {
        "orange" : [],
        "blue" : []
    },

    "anthills" : {
        "orange" : {
            "x" : 0, "y" : 0
        },
        "blue" : {
            "x" : 0, "y" : 0
        }
    },

    "clods" : []
}
path = "C:/Users/antoi/OneDrive/Bureau/carte_test_basic.cpx"

#=============================================================================================================================================================================================================#

load_board(path, game)

spawn(game)
for x in range(16):
    time.sleep(1)
    order = IA_Play(game, 'orange')
    move_list = order_treatment(order)
    move(game, 'orange', move_list)
    order = IA_Play(game, 'blue')
    move_list = order_treatment(order)
    move(game, 'blue', move_list)
    display(0, game)
    print(game)
